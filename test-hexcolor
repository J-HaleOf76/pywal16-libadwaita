#!/bin/sh

# case "$1" in
#   "#[:xdigit]") ;;
# esac

#[A-Fa-f0-9]

# return type: comma delimited list string
# usage: hexToRgb "#abc123"
# description:
#   Converts hex colors into rgb list joined with comma
#   #ffffff -> 255,255,255
hexToRgb() {
    # Remove '#' character from hex color #fff -> fff
    plain=${1#*#}
    # printf '%s\n' "$plain"
    seg1="${plain%%[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]}"
    # printf '%s\n' "$seg1"
    seg2="${plain}"
    seg2="${seg2%%[A-Fa-f0-9][A-Fa-f0-9]}"
    seg2="${seg2##[A-Fa-f0-9][A-Fa-f0-9]}"
    # printf '%s\n' "$seg2"
    seg3="${plain##[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]}"
    # printf '%s\n' "$seg3"
    printf '%d,%d,%d\n' 0x"${seg1}" 0x"${seg2}" 0x"${seg3}"
  }

# return type: string
# usage: split_list "string" "pattern"
# description:
#   splits list string on pattern returns
#   a newline separated list.
# taken from: https://github.com/dylanaraps/pure-sh-bible#split-a-string-on-a-delimiter
split_list() {
    # Disable globbing.
    # This ensures that the word-splitting is safe.
    set -f

    # Store the current value of 'IFS' so we
    # can restore it later.
    old_ifs=$IFS

    # Change the field separator to what we're
    # splitting on.
    IFS=$2

    # Create an argument list splitting at each
    # occurance of '$2'.
    #
    # This is safe to disable as it just warns against
    # word-splitting which is the behavior we expect.
    # shellcheck disable=2086
    set -- $1

    # Print each list value on its own line.
    printf '%s\n' "$@"

    # Restore the value of 'IFS'.
    IFS=$old_ifs

    # Re-enable globbing.
    set +f
}

lighten () {
    color=$1
    amount=$2
    rgbcol=$(hexToRgb "$color")
    colout=""
    i=0
    for colbit in $(split_list "$rgbcol" ","); do
        modbit=$(( colbit + ( 255 * amount / 100 ) ))
        # printf '%s: %d\n' "$i" "$modbit"
        # printf '%s: %02x\n' "$i" "$modbit"
        colout="${colout}"$(printf '%02x' "$modbit")
        i=$(( i + 1))
    done
    printf '#%s\n' "$colout"
}

darken () {
    color=$1
    amount=$2
    rgbcol=$(hexToRgb "$color")
    colout=""
    i=0
    for colbit in $(split_list "$rgbcol" ","); do
        modbit=$(( colbit - ( 255 * amount / 100 ) ))
        # printf '%s: %d\n'   "$i" "$modbit"
        # printf '%s: %02x\n' "$i" "$modbit"
        colout="${colout}"$(printf '%02x' "$modbit")
        i=$(( i + 1))
    done
    printf '#%s\n' "$colout"
}

# test colors
# Special
background='#22110e'

background1='#241310' # lighten 1%
background2='#261512' # lighten 2%
background3='#281815' # lighten 3%
background4='#2a1a17' # lighten 4%
background5='#2d1c1a' # lighten 5%
foreground='#c7c3c2'
cursor='#c7c3c2'

# Colors
color0='#22110e'
color1='#804338'
color2='#876354'
color3='#908883'
color4='#5d7f54'
color5='#757b7a'
color6='#4c6f81'
color7='#908886'
color8='#594c4a'
color9='#ab5a4b'
color10='#b58471'
color11='#c0b6af'
color12='#7daa71'
color13='#9ca4a3'
color14='#6695ac'
color15='#c7c3c2'





echo    "$color0"
lighten "$color0" 1
lighten "$color0" 2
lighten "$color0" 3
lighten "$color0" 4
lighten "$color0" 5
darken  "$color0" 1
